---
import { getFramework, type Framework } from '@/lib/framework'
import type { HTMLTag, Polymorphic } from 'astro/types'

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	[framework in Framework]?: string
}

const { as: _Tag, react, vue, svelte, vanilla, ...props } = Astro.props
let Tag = _Tag ?? (Object.keys(props).length ? 'div' : Fragment)
const framework = getFramework(Astro.params)
---

<Tag {...props}
	>{
		/*
	We can't use a loop here because Astro needs the slot names to be static strings
	*/
	}{
		framework === 'react' &&
			(react != null ? react : Astro.slots.has('react') ? <slot name="react" /> : <slot />)
	}{
		framework === 'vue' &&
			(vue != null ? vue : Astro.slots.has('vue') ? <slot name="vue" /> : <slot />)
	}{
		/*
	<!--{
		framework === 'svelte' &&
			(svelte != null ? svelte : Astro.slots.has('svelte') ? <slot name="svelte" /> : <slot />)
	}
	{
		framework === 'vanilla' &&
			(vanilla != null ? vanilla : Astro.slots.has('vanilla') ? <slot name="vanilla" /> : <slot />)
	} -->
*/
	}</Tag
>
