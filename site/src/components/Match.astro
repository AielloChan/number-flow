---
import { getFramework, type Framework } from '@/lib/framework'
import type { HTMLTag, Polymorphic } from 'astro/types'

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> &
	(
		| {
				[framework in Framework]?: string
		  }
		| {
				[framework in Framework]?: true
		  }
	)

const { as: _Tag, react, vue, svelte, vanilla, ...props } = Astro.props
let Tag = _Tag ?? (Object.keys(props).length ? 'div' : Fragment)
const framework = getFramework(Astro.params)
---

<Tag {...props}
	>{
		/*
	We can't use a loop here because Astro needs the slot names to be static strings
	*/
	}{
		framework === 'react' &&
			(typeof react == 'string' ? (
				react
			) : Astro.slots.has('react') ? (
				<slot name="react" />
			) : (
				<slot />
			))
	}{
		framework === 'vue' &&
			(typeof vue == 'string' ? vue : Astro.slots.has('vue') ? <slot name="vue" /> : <slot />)
	}{
		/*
		 */
	}</Tag
>
